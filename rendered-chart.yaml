---
# Source: my-request-app-chart/templates/frontend-html-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-request-app-my-request-app-chart-frontend-html
  labels:
    helm.sh/chart: my-request-app-chart-0.1.0
    app.kubernetes.io/name: my-request-app-chart
    app.kubernetes.io/instance: my-request-app
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: frontend
data:
  index.html: |
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Request Count</title>
        <style>
            body {
                font-family: sans-serif;
                display: flex;
                justify-content: center;
                align-items: center;
                min-height: 100vh;
                margin: 0;
                background-color: #f0f0f0;
                color: #333;
            }
            .container {
                text-align: center;
                padding: 20px;
                border-radius: 8px;
                background-color: #fff;
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            }
            h1 {
                color: #007bff;
            }
            #requestCount {
                font-size: 3em;
                font-weight: bold;
                margin-top: 10px;
                color: #28a745;
            }
            .loading {
                color: #6c757d;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>Request Count</h1>
            <div id="requestCount" class="loading">Loading...</div>
        </div>

        <script>
            // *** IMPORTANT: This URL is injected by Helm using the Kubernetes service name! ***
            const BACKEND_URL = "http://my-request-app-my-request-app-chart-backend-service:3000/get-count";

            async function getRequestCount() {
                const requestCountElement = document.getElementById('requestCount');
                requestCountElement.textContent = 'Loading...';
                requestCountElement.classList.add('loading');

                try {
                    const response = await fetch(BACKEND_URL);
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    const data = await response.json();
                    if (typeof data.count === 'number') {
                        requestCountElement.textContent = data.count;
                        requestCountElement.classList.remove('loading');
                    } else {
                        requestCountElement.textContent = 'Error: Invalid data';
                        requestCountElement.classList.add('loading');
                    }
                } catch (error) {
                    console.error('Error fetching request count:', error);
                    requestCountElement.textContent = 'Error loading count';
                    requestCountElement.classList.add('loading');
                }
            }

            // Call the function immediately when the page loads
            getRequestCount();

            // Refresh every 5 seconds
            setInterval(getRequestCount, 5000);
        </script>
    </body>
    </html>
---
# Source: my-request-app-chart/templates/backend-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-request-app-my-request-app-chart-backend-service
  labels:
    helm.sh/chart: my-request-app-chart-0.1.0
    app.kubernetes.io/name: my-request-app-chart
    app.kubernetes.io/instance: my-request-app
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: backend
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: 3000
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: my-request-app-chart
    app.kubernetes.io/instance: my-request-app
    app.kubernetes.io/component: backend
---
# Source: my-request-app-chart/templates/frontend-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-request-app-my-request-app-chart-frontend-service
  labels:
    helm.sh/chart: my-request-app-chart-0.1.0
    app.kubernetes.io/name: my-request-app-chart
    app.kubernetes.io/instance: my-request-app
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: frontend
spec:
  type: LoadBalancer
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: my-request-app-chart
    app.kubernetes.io/instance: my-request-app
    app.kubernetes.io/component: frontend
---
# Source: my-request-app-chart/templates/backend-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-request-app-my-request-app-chart-backend
  labels:
    helm.sh/chart: my-request-app-chart-0.1.0
    app.kubernetes.io/name: my-request-app-chart
    app.kubernetes.io/instance: my-request-app
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: my-request-app-chart
      app.kubernetes.io/instance: my-request-app
      app.kubernetes.io/component: backend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: my-request-app-chart
        app.kubernetes.io/instance: my-request-app
        app.kubernetes.io/component: backend
    spec:
      containers:
        - name: backend
          # IMPORTANT:  Reference the ImageStreamTag
          image: 'backend-image:latest'
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /get-count
              port: http
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /get-count
              port: http
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          resources:
            {}
---
# Source: my-request-app-chart/templates/frontend-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-request-app-my-request-app-chart-frontend
  labels:
    helm.sh/chart: my-request-app-chart-0.1.0
    app.kubernetes.io/name: my-request-app-chart
    app.kubernetes.io/instance: my-request-app
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: my-request-app-chart
      app.kubernetes.io/instance: my-request-app
      app.kubernetes.io/component: frontend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: my-request-app-chart
        app.kubernetes.io/instance: my-request-app
        app.kubernetes.io/component: frontend
    spec:
      # Mount the index.html from the ConfigMap
      volumes:
        - name: frontend-html
          configMap:
            name: my-request-app-my-request-app-chart-frontend-html
      containers:
        - name: frontend
          # IMPORTANT: Reference the ImageStreamTag
          image: 'frontend-image:latest'
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          volumeMounts:
            - name: frontend-html
              mountPath: /usr/share/nginx/html/index.html
              subPath: index.html
          resources:
            {}
---
# Source: my-request-app-chart/templates/backend-buildconfig.yaml
apiVersion: build.openshift.io/v1
kind: BuildConfig
metadata:
  name: my-request-app-my-request-app-chart-backend-build
  labels:
    helm.sh/chart: my-request-app-chart-0.1.0
    app.kubernetes.io/name: my-request-app-chart
    app.kubernetes.io/instance: my-request-app
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: backend
spec:
  output:
    to:
      kind: ImageStreamTag
      name: my-request-app-my-request-app-chart-backend-image:latest
  strategy:
    type: Docker
    dockerStrategy:
      dockerfilePath: Dockerfile.backend # Path to the Dockerfile in the Git repo
  source:
    type: Git
    git:
      uri: https://github.com/dwinchell/resilency-demo/
      ref: main
    contextDir: . # Optional subdirectory
  triggers:
    - type: ConfigChange
  runPolicy: Serial
---
# Source: my-request-app-chart/templates/frontend-buildconfig.yaml
apiVersion: build.openshift.io/v1
kind: BuildConfig
metadata:
  name: my-request-app-my-request-app-chart-frontend-build
  labels:
    helm.sh/chart: my-request-app-chart-0.1.0
    app.kubernetes.io/name: my-request-app-chart
    app.kubernetes.io/instance: my-request-app
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: frontend
spec:
  output:
    to:
      kind: ImageStreamTag
      name: my-request-app-my-request-app-chart-frontend-image:latest
  strategy:
    type: Docker
    dockerStrategy:
      dockerfilePath: Dockerfile.frontend # Path to the Dockerfile in the Git repo
  source:
    type: Git
    git:
      uri: https://github.com/dwinchell/resilency-demo/
      ref: main
    contextDir: . # Optional subdirectory
  triggers:
    - type: ConfigChange
  runPolicy: Serial
---
# Source: my-request-app-chart/templates/backend-imagestream.yaml
apiVersion: image.openshift.io/v1
kind: ImageStream
metadata:
  name: my-request-app-my-request-app-chart-backend-image
  labels:
    helm.sh/chart: my-request-app-chart-0.1.0
    app.kubernetes.io/name: my-request-app-chart
    app.kubernetes.io/instance: my-request-app
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: backend
spec:
  lookupPolicy:
    local: false # Important for BuildConfigs to find the ImageStream
---
# Source: my-request-app-chart/templates/frontend-imagestream.yaml
apiVersion: image.openshift.io/v1
kind: ImageStream
metadata:
  name: my-request-app-my-request-app-chart-frontend-image
  labels:
    helm.sh/chart: my-request-app-chart-0.1.0
    app.kubernetes.io/name: my-request-app-chart
    app.kubernetes.io/instance: my-request-app
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: frontend
spec:
  lookupPolicy:
    local: false # Important for BuildConfigs to find the ImageStream
